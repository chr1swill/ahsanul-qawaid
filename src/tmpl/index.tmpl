<!doctype html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Ahsanul Qawaid</title>
  <style>
  *::before, *::after, *{ box-sizing: border-box; margin: 0px 0px; }
  html, body, ul{height:100%;width:100%;}
  body{gap: 8px 0px; background-color: black; color: gray;}
  {{- $VISIBILILY_ATTR := "_visible" -}}
  section:not([{{- $VISIBILILY_ATTR -}}]){display: none}
	ul{list-style-type: none;}
  {{- $N_COLS := 10 -}}
  .letter_list_container{direction: rtl; display: grid; grid-template-columns: repeat({{- $N_COLS -}}, 1fr); grid-auto-flow: row dense;}
  .flex_center{display:flex;justify-content:center;align-items:center}
  nav{width: 100%;gap: 32px;position:fixed;bottom:0;}
  button{all: unset;cursor: pointer;font-size: 64px;}
  button:focus-visible{border: 1px solid gray;}
	.keymap_info_details{display:none;position:relative;background-color:black;}
	.keymap_info_text{text-decoration:underline;}
	.keymap_info_text:hover + .keymap_info_details,
	.keymap_info_text:focus-visible + .keymap_info_details{display:block;}
  audio{}
  </style>
</head>
<body>
<h1>Ahsanul Qawaid</h1>
<div>
	<p class="keymap_info_text">Help [?]</p>
	<ul class="keymap_info_details">
		{{- range .Keymaps -}}
		<li>
			<p>
			<strong>
        {{- $namelen := len .Names -}}
				{{- $finalidx := Sub $namelen 1 -}}
			  {{- range $i, $v := .Names -}}
			    {{- if eq $finalidx $i -}}
						{{ printf "%s " $v }}
				  {{- else -}}
				    {{ printf "%s or " $v }}
				  {{- end -}}
				{{- end -}}
			</strong>
			{{ printf "- %s" .Description -}}
			</p>
		</li>
		{{- end -}}
	</ul>
</div>
{{- range .Sections -}}
<section id="{{- .Name -}}">
  <h2 id="{{- .Name -}}_title">Page {{ .Name -}}</h2>
  {{- $last := 0 -}}
  {{- if .Letters -}}
  <article>
    <h3>Letters:</h3>
    <ul class="letter_list_container" id="{{- .Name -}}_letters">
      {{- $vowel := .Vowel -}}
      {{- $name := .Name -}}
      {{- range $i, $v := .Letters -}}
      <li class="flex_center">
        {{- if $vowel -}}
        <button>{{- printf "%s%s" $v $vowel -}}</button>
        {{- else -}}
        <button>{{- $v -}}</button>
        {{- end -}}

        {{- $idx := Add $i 1 -}}
        {{- if lt $idx 10 -}}
        <audio src='{{- printf "/audio/%s/0%d.mp3" $name $idx -}}'></audio>
        {{- else -}}
        <audio src='{{- printf "/audio/%s/%d.mp3" $name $idx -}}'></audio>
        {{- end -}}
      </li>
      {{- $last = $i -}}
      {{- end -}}
    </ul>
  </article>
  {{- $last = Add $last 1 -}}
  {{- else -}}
  {{- end -}}

  {{- if .Words -}}
  <article>
    <h3>Words:</h3>
    <ul class="letter_list_container" id="{{- .Name -}}_words">
      {{- $name := .Name -}}
      {{- range $i, $v := .Words -}}
      <li class="flex_center">
        <button>{{- $v -}}</button>
        {{- $idx := Add $i 1 -}}
        {{- $idx := Add $last $idx -}}
        {{-  if lt $idx 10 -}}
        <audio src='{{- printf "/audio/%s/0%d.mp3" $name $idx -}}'></audio>
        {{- else -}}
        <audio src='{{- printf "/audio/%s/%d.mp3" $name $idx -}}'></audio>
        {{- end -}}
      </li>
      {{- end -}}
    </ul>
  </article>
  {{- end -}}
</section>
{{- end -}}
<nav class="flex_center"><button id="nav_back">Back</button><button id="nav_next">Next</button></nav>
<script>
  let section_idx;
  const LS_KEY = "SECTION_STATE";
  const VISIBILILY_ATTR = {{- $VISIBILILY_ATTR -}};
  const N_COLS = {{- $N_COLS -}};
  const PAGE_IDX_MIN = 0;
  const PAGE_IDX_MAX = {{- len .Sections -}} - 1;
  const page_ids = [ {{- range .Sections -}}{{- .Name -}},{{- end -}} ];
  const enum_keys = Object.freeze({
    down: "ArrowDown", up: "ArrowUp",
    left: "ArrowLeft", right: "ArrowRight",
    n: "n", b: "b", j: "j", k: "k", h: "h", l: "l"});
  const focus_options = Object.freeze({
    focusVisible: true, preventScroll: true });


  function update_sections_in_dom(section_idx) {
    let last, cur;

    console.assert(section_idx !== null && section_idx !== undefined);
    console.assert(typeof section_idx === 'number');

    last = document.body.querySelector(`section[${VISIBILILY_ATTR}]`);
    cur = document.getElementById(page_ids[section_idx]);
    if (last !== null) last.removeAttribute(VISIBILILY_ATTR);
    cur.setAttribute(VISIBILILY_ATTR, "");
  }


  function page_ids_get_idx_after_command(section_idx, command) {
    if (section_idx === null ||
       section_idx === undefined) {
       return PAGE_IDX_MIN;
    }

    switch (command) {
      case "nav_back":
        if (section_idx - 1 < PAGE_IDX_MIN)
          return PAGE_IDX_MAX;
        else
          return section_idx - 1;
        break;
      case "nav_next":
        if (section_idx + 1 > PAGE_IDX_MAX)
          return PAGE_IDX_MIN;
        else
          return section_idx + 1;
        break;
      default:
        console.debug("should never ever happen");
        return PAGE_IDX_MIN;
        break;
    }
  }


  section_idx = window.localStorage.getItem(LS_KEY);
  if (section_idx === null) {
    section_idx = PAGE_IDX_MIN;
    window.localStorage.setItem(LS_KEY, section_idx);
  }
  update_sections_in_dom(window.parseInt(section_idx));


  document.body.onclick = function (e) {
    let el, audio;el=e.target;
    if (el.tagName !== "BUTTON") return;
    if (el.parentElement.tagName !== "NAV") {
      audio=el.nextElementSibling;
      console.assert(audio.tagName = "AUDIO");
      audio.play();
    } else {
      section_idx = window.parseInt(window.localStorage.getItem(LS_KEY));
      console.assert(typeof section_idx === "number");
      section_idx = page_ids_get_idx_after_command(section_idx, el.id);
      console.assert(typeof section_idx === "number");

      update_sections_in_dom(section_idx);
      window.localStorage.setItem(LS_KEY, section_idx);
    }
  }


  document.body.onkeydown = function (e) {
    if (e.key === enum_keys.n) {
      document.getElementById("nav_next").click();
      return;
    } else if (e.key === enum_keys.b) {
      document.getElementById("nav_back").click();
      return;
    }

    if (e.target.tagName !== "BUTTON") {
      console.assert(e.target.tagName === "BODY");
      e.target
      .querySelector(
					`section[${VISIBILILY_ATTR}] li:first-of-type button`)
      .focus(focus_options);
      return;
    }

    let check, arr, idx; 
		switch(e.key) {
			case enum_keys.k:
			case enum_keys.up:
				arr = Array.from(e.target.parentElement.parentElement.children); 
				idx = arr.indexOf(e.target.parentElement);
				if (idx - N_COLS < 0) {
					arr[(arr.length - 1) - (idx % N_COLS)]
						.firstElementChild.focus(focus_options);
				} else {
					arr[idx - N_COLS].firstElementChild.focus(focus_options);
				}
				break;
			case enum_keys.j:
			case enum_keys.down: 
				arr = Array.from(e.target.parentElement.parentElement.children); 
				idx = arr.indexOf(e.target.parentElement);
				if (idx + N_COLS > arr.length - 1) {
					arr[idx % N_COLS].firstElementChild.focus(focus_options);
				} else {
					arr[idx + N_COLS].firstElementChild.focus(focus_options);
				}
				break;
			case enum_keys.h:
			case enum_keys.left:
				check = e.target.parentElement.nextElementSibling;
				if (check !== null) {
					check.firstElementChild.focus(focus_options);
				} else {
					document.body
						.querySelector(
								`section[${VISIBILILY_ATTR}] li:first-of-type button`)
						.focus(focus_options);
				}
				break;
			case enum_keys.l:
			case enum_keys.right:
				check = e.target.parentElement.previousElementSibling;
				if (check !== null) {
					check.firstElementChild.focus(focus_options);
				} else {
					document.body
						.querySelector(
								`section[${VISIBILILY_ATTR}] li:last-of-type button`)
						.focus(focus_options);
				}
				break;
		}
  }
</script>
</body>
</html>
